{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutOfCanvasUpdater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_2 = require(\"./Utils\");\n\nclass OutOfCanvasUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init() {}\n\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning;\n  }\n\n  update(particle, delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = particle.options.move.outModes;\n    this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n\n  updateOutMode(particle, delta, outMode, direction) {\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.bounce(particle, delta, direction, outMode);\n        break;\n\n      case Enums_1.OutMode.destroy:\n        this.destroy(particle, direction);\n        break;\n\n      case Enums_1.OutMode.out:\n        this.out(particle, direction);\n        break;\n\n      case Enums_1.OutMode.none:\n      default:\n        this.none(particle, direction);\n        break;\n    }\n  }\n\n  destroy(particle, direction) {\n    const container = this.container;\n\n    if ((0, Utils_1.isPointInside)(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n\n    container.particles.remove(particle, undefined, true);\n  }\n\n  out(particle, direction) {\n    const container = this.container;\n\n    if ((0, Utils_1.isPointInside)(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n\n    const wrap = particle.options.move.warp,\n          canvasSize = container.canvas.size,\n          newPos = {\n      bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    },\n          sizeValue = particle.getRadius(),\n          nextBounds = (0, Utils_1.calculateBounds)(particle.position, sizeValue);\n\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n      particle.position.x = newPos.left;\n      particle.initialPosition.x = particle.position.x;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n      particle.initialPosition.x = particle.position.x;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    }\n\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n\n      particle.position.y = newPos.top;\n      particle.initialPosition.y = particle.position.y;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n\n      particle.position.y = newPos.bottom;\n      particle.initialPosition.y = particle.position.y;\n    }\n  }\n\n  bounce(particle, delta, direction, outMode) {\n    const container = this.container;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = (0, Utils_1.calculateBounds)(pos, size),\n          canvasSize = container.canvas.size;\n    (0, Utils_2.bounceHorizontal)({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    (0, Utils_2.bounceVertical)({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  none(particle, direction) {\n    if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n      return;\n    }\n\n    const gravityOptions = particle.options.move.gravity,\n          container = this.container;\n    const canvasSize = container.canvas.size;\n    const pRadius = particle.getRadius();\n\n    if (!gravityOptions.enable) {\n      if (particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < 0 && particle.position.y >= -pRadius || particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < 0 && particle.position.x >= -pRadius) {\n        return;\n      }\n\n      if (!(0, Utils_1.isPointInside)(particle.position, container.canvas.size, pRadius, direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < -pRadius && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;","map":{"version":3,"names":["Object","defineProperty","exports","value","OutOfCanvasUpdater","Utils_1","require","Enums_1","Utils_2","constructor","container","init","isEnabled","particle","destroyed","spawning","update","delta","_a","_b","_c","_d","outModes","options","move","updateOutMode","bottom","default","OutModeDirection","left","right","top","outMode","direction","OutMode","bounce","bounceVertical","bounceHorizontal","split","destroy","out","none","isPointInside","position","canvas","size","getRadius","particles","remove","undefined","wrap","warp","canvasSize","newPos","height","offset","y","x","width","sizeValue","nextBounds","calculateBounds","initialPosition","Math","random","handled","plugin","plugins","particleBounce","pos","getPosition","bounds","distance","horizontal","vertical","gravityOptions","gravity","pRadius","enable","velocity","inverse"],"sources":["C:/Users/XGaming Systems/Downloads/Portfolio-v2-main/Portfolio_Ian/node_modules/tsparticles/Updaters/OutModes/OutOfCanvasUpdater.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OutOfCanvasUpdater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_2 = require(\"./Utils\");\nclass OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        var _a, _b, _c, _d;\n        const outModes = particle.options.move.outModes;\n        this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(particle, delta, outMode, direction) {\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.bounce(particle, delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                this.destroy(particle, direction);\n                break;\n            case Enums_1.OutMode.out:\n                this.out(particle, direction);\n                break;\n            case Enums_1.OutMode.none:\n            default:\n                this.none(particle, direction);\n                break;\n        }\n    }\n    destroy(particle, direction) {\n        const container = this.container;\n        if ((0, Utils_1.isPointInside)(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n    out(particle, direction) {\n        const container = this.container;\n        if ((0, Utils_1.isPointInside)(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        }, sizeValue = particle.getRadius(), nextBounds = (0, Utils_1.calculateBounds)(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n            particle.position.x = newPos.left;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.top;\n            particle.initialPosition.y = particle.position.y;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.bottom;\n            particle.initialPosition.y = particle.position.y;\n        }\n    }\n    bounce(particle, delta, direction, outMode) {\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = (0, Utils_1.calculateBounds)(pos, size), canvasSize = container.canvas.size;\n        (0, Utils_2.bounceHorizontal)({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        (0, Utils_2.bounceVertical)({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    none(particle, direction) {\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!(0, Utils_1.isPointInside)(particle.position, container.canvas.size, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}