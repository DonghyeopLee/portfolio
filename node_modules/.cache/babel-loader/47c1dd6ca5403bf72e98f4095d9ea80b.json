{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./InteractionManager\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new Mover_1.Mover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container;\n    const options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.freqs.links = new Map();\n    this.freqs.triangles = new Map();\n    let handled = false;\n    this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    container.pathGenerator.init(container);\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n    }\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n\n      if (resizeFactor) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n\n      particle.bubble.inRange = false;\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      this.mover.move(particle, delta);\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    this.interactionManager.externalInteract(delta);\n\n    for (const particle of container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions, group) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const limit = options.particles.number.limit * container.density;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this.pushParticle(position, overrideOptions, group);\n  }\n\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = new ParticlesOptions_1.ParticlesOptions();\n    options.load(parent.options);\n    const factor = (0, Utils_1.getRangeValue)(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? (0, Utils_1.setRangeValue)(-parent.size.value, parent.size.value) : 0;\n    const position = {\n      x: parent.position.x + (0, Utils_1.randomInRange)(offset),\n      y: parent.position.y + (0, Utils_1.randomInRange)(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n    let res = this.freqs.links.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.links.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.freqs.triangles.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.triangles.set(key, res);\n    }\n\n    return res;\n  }\n\n  addManualParticles() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n    const particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","Mover_1","constructor","container","nextId","array","zArray","mover","Mover","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","updaters","Plugins","getUpdaters","count","length","init","_a","options","actualOptions","handled","plugin","plugins","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","remove","update","delta","particlesToDelete","resizeFactor","position","x","y","bubble","inRange","destroyed","particleUpdate","move","push","insert","Point","getPosition","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","key","Math","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","manualParticles","pos","setDensity","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","Particle","canAdd","e","console","warn"],"sources":["C:/Users/XGaming Systems/Downloads/Portfolio-v2-main/Portfolio_Ian/node_modules/tsparticles/Core/Particles.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Mover_1 = require(\"./Particle/Mover\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.mover = new Mover_1.Mover(container);\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            this.mover.move(particle, delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = (0, Utils_1.getRangeValue)(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? (0, Utils_1.setRangeValue)(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + (0, Utils_1.randomInRange)(offset),\n            y: parent.position.y + (0, Utils_1.randomInRange)(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container;\n        const options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}