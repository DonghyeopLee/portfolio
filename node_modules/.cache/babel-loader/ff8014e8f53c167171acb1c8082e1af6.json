{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst Enums_1 = require(\"../../../Enums\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nconst ProcessBubbleType_1 = require(\"./ProcessBubbleType\");\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return (0, Utils_1.clamp)(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return (0, Utils_1.clamp)(value, modeValue, particleValue);\n  }\n}\n\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = (0, Utils_1.isDivModeEnabled)(Enums_1.DivMode.bubble, divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(Enums_1.HoverMode.bubble, hoverMode) || (0, Utils_1.isInArray)(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && (0, Utils_1.isInArray)(Enums_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(Enums_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble();\n    } else {\n      (0, Utils_1.divModeExecute)(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = (0, Utils_1.divMode)(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n            particle.bubble.radius = value;\n          }\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n        delete particle.bubble.radius;\n      }\n\n      if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  clickBubble() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = (0, Utils_1.getDistance)(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: ProcessBubbleType_1.ProcessBubbleType.size\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: (0, Utils_1.getRangeMax)(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: ProcessBubbleType_1.ProcessBubbleType.opacity\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = (0, Utils_1.getDistance)(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, Utils_1.getRangeMax)(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n      particle.bubble.finalColor = (0, Utils_1.colorToHsl)(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? (0, Utils_1.rgbToHsl)((0, Utils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n}\n\nexports.Bubbler = Bubbler;","map":{"version":3,"names":["Object","defineProperty","exports","value","Bubbler","Utils_1","require","Enums_1","ExternalInteractorBase_1","ProcessBubbleType_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","clamp","ExternalInteractorBase","constructor","container","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","isDivModeEnabled","DivMode","bubble","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","isInArray","HoverMode","ClickMode","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","DivType","circle","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","ProcessBubbleType","size","_a","_b","mouseClickPos","distance","queryCircle","clicking","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","itemFromArray","colorToHsl","mix","pColor","getFillColor","rgbToHsl","colorMix"],"sources":["C:/Users/XGaming Systems/Downloads/Portfolio-v2-main/Portfolio_Ian/node_modules/tsparticles/Interactions/External/Bubble/Bubbler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst Utils_1 = require(\"../../../Utils\");\nconst Enums_1 = require(\"../../../Enums\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\nconst ProcessBubbleType_1 = require(\"./ProcessBubbleType\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return (0, Utils_1.clamp)(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return (0, Utils_1.clamp)(value, modeValue, particleValue);\n    }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = (0, Utils_1.isDivModeEnabled)(Enums_1.DivMode.bubble, divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return (0, Utils_1.isInArray)(Enums_1.HoverMode.bubble, hoverMode) || (0, Utils_1.isInArray)(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && (0, Utils_1.isInArray)(Enums_1.HoverMode.bubble, hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && (0, Utils_1.isInArray)(Enums_1.ClickMode.bubble, clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            (0, Utils_1.divModeExecute)(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === Enums_1.DivType.circle\n                ? new Utils_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = (0, Utils_1.divMode)(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                    delete particle.bubble.radius;\n                }\n                if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                delete particle.bubble.radius;\n            }\n            if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = (0, Utils_1.getDistance)(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: ProcessBubbleType_1.ProcessBubbleType.size,\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: (0, Utils_1.getRangeMax)(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: ProcessBubbleType_1.ProcessBubbleType.opacity,\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = (0, Utils_1.getDistance)(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, Utils_1.getRangeMax)(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n            particle.bubble.finalColor = (0, Utils_1.colorToHsl)(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? (0, Utils_1.rgbToHsl)((0, Utils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}